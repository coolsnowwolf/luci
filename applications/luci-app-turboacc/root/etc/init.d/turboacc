#!/bin/sh /etc/rc.common
# Copyright (C) 2018 Lean <coolsnowwolf@gmail.com>
# Copyright (C) 2019-2021 Tianling Shen <cnsztl@immortalwrt.org>

USE_PROCD=1
START=90
STOP=10

EXTRA_COMMANDS="check_status"
EXTRA_HELP="	check_status Check running status of utils"

restart_utils="true"

PS="/bin/busybox ps"

inital_conf(){
	config_load "turboacc"
	config_get "sw_flow" "config" "sw_flow" "0"
	config_get "hw_flow" "config" "hw_flow" "0"
	config_get "sfe_flow" "config" "sfe_flow" "0"
	config_get "bbr_cca" "config" "bbr_cca" "0"
	config_get "fullcone_nat" "config" "fullcone_nat" "0"
	config_get "dns_caching" "config" "dns_caching" "0"
	config_get "dns_caching_mode" "config" "dns_caching_mode" "0"
	config_get "dns_caching_dns" "config" "dns_caching_dns"

	[ ! -e "/lib/modules/$(uname -r)/xt_FLOWOFFLOAD.ko" ] && { sw_flow="0"; hw_flow="0"; }
	[ ! -e "/lib/modules/$(uname -r)/shortcut-fe-cm.ko" ] && sfe_flow="0"
	[ ! -e "/lib/modules/$(uname -r)/tcp_bbr.ko" ] && bbr_cca="0"
	[ ! -e "/lib/modules/$(uname -r)/xt_FULLCONENAT.ko" ] && fullcone_nat="0"
}

start_pdnsd() {
	[ -d "/var/run/dnscache" ] || mkdir -p "/var/run/dnscache"
	cat > "/var/run/dnscache/dnscache.conf" <<EOF
global {
    perm_cache=1024;        # dns缓存大小，单位KB，建议不要写的太大
    cache_dir="/var/dnscache";     # 缓存文件的位置
    pid_file = /var/run/dnscache.pid;
    server_ip = 127.0.0.1;        # pdnsd监听的网卡，0.0.0.0是全部网卡
    server_port=5333;           # pdnsd监听的端口，不要和别的服务冲突即可
    status_ctl = on;
    paranoid=on;                  # 二次请求模式，如果请求主DNS服务器返回的是垃圾地址，就向备用服务器请求
    query_method=udp_only;
    neg_domain_pol = off;
    par_queries = 400;          # 最多同时请求数
    min_ttl = 1h;               # DNS结果最短缓存时间
    max_ttl = 1w;               # DNS结果最长缓存时间
    timeout = 10;               # DNS请求超时时间，单位秒
}

server {
    label = "routine";
    ip = ${dns_caching_dns};     # 这里为主要上级 dns 的 ip 地址，建议填写一个当地最快的DNS地址
    timeout = 5;              # DNS请求超时时间
    reject = 74.125.127.102,  # 以下是脏IP，也就是DNS污染一般会返回的结果，如果收到如下DNS结果会触发二次请求（TCP协议一般不会碰到脏IP）
        74.125.155.102,
        74.125.39.102,
        74.125.39.113,
        209.85.229.138,
        128.121.126.139,
        159.106.121.75,
        169.132.13.103,
        192.67.198.6,
        202.106.1.2,
        202.181.7.85,
        203.161.230.171,
        203.98.7.65,
        207.12.88.98,
        208.56.31.43,
        209.145.54.50,
        209.220.30.174,
        209.36.73.33,
        211.94.66.147,
        213.169.251.35,
        216.221.188.182,
        216.234.179.13,
        243.185.187.39,
        37.61.54.158,
        4.36.66.178,
        46.82.174.68,
        59.24.3.173,
        64.33.88.161,
        64.33.99.47,
        64.66.163.251,
        65.104.202.252,
        65.160.219.113,
        66.45.252.237,
        69.55.52.253,
        72.14.205.104,
        72.14.205.99,
        78.16.49.15,
        8.7.198.45,
        93.46.8.89,
        37.61.54.158,
        243.185.187.39,
        190.93.247.4,
        190.93.246.4,
        190.93.245.4,
        190.93.244.4,
        65.49.2.178,
        189.163.17.5,
        23.89.5.60,
        49.2.123.56,
        54.76.135.1,
        77.4.7.92,
        118.5.49.6,
        159.24.3.173,
        188.5.4.96,
        197.4.4.12,
        220.250.64.24,
        243.185.187.30,
        249.129.46.48,
        253.157.14.165;
    reject_policy = fail;
}

server {
    label = "special";                  # 这个随便写
    ip = 117.50.10.10,52.80.52.52,119.29.29.29; # 这里为备用DNS服务器的 ip 地址
    port = 5353;                        # 推荐使用53以外的端口（DNS服务器必须支持
    proxy_only = on;
    timeout = 5;
}

source {
	owner=localhost;
//	serve_aliases=on;
	file="/etc/hosts";
}

rr {
	name=localhost;
	reverse=on;
	a=127.0.0.1;
	owner=localhost;
	soa=localhost,root.localhost,42,86400,900,86400,86400;
}
EOF

	if [ ! -f "/var/dnscache/pdnsd.cache" ]; then
		mkdir -p "/var/dnscache"
		echo -ne "pd13\000\000\000\000" > "/var/dnscache/pdnsd.cache"
		chown -R nobody.nogroup "/var/dnscache"
	fi

	[ -d "/var/sbin" ] || mkdir -p "/var/sbin"
	cp -a "/usr/sbin/pdnsd" "/var/sbin/dnscache"
	echo "PDNSD: Start DNS Caching"
}

start_dnsforwarder() {
	mkdir -p "/var/run/dnscache"
	cat > "/var/run/dnscache/dnscache.conf" <<EOF
LogOn false
LogFileThresholdLength 102400
LogFileFolder /var/run/dnscache
UDPLocal 127.0.0.1:5333
UDPGroup ${dns_caching_dns} * on
GroupFile
BlockIP 243.185.187.39,46.82.174.68,37.61.54.158,93.46.8.89,59.24.3.173,203.98.7.65,8.7.198.45,78.16.49.15,159.106.121.75,69.63.187.12,31.13.76.8,31.13.64.49
IPSubstituting
BlockNegativeResponse false
Hosts
HostsUpdateInterval 18000
HostsDownloadPath
HostsScript
HostsRetryInterval 30
AppendHosts
BlockIpv6WhenIpv4Exists false
UseCache true
CacheSize 1048576
MemoryCache true
CacheFile
IgnoreTTL false
OverrideTTL -1
MultipleTTL 1
ReloadCache false
OverwriteCache false
DisabledType
DisabledDomain
DisabledList
DomainStatistic false
DomainStatisticTempletFile
StatisticUpdateInterval 29
EOF

	[ -d "/var/sbin" ] || mkdir -p "/var/sbin"
	cp -a "/usr/bin/dnsforwarder" "/var/sbin/dnscache"
	echo "DnsForwarder: Start DNS Caching"

}

start_dnsproxy() {
	[ -d "/var/run/dnscache" ] || mkdir -p "/var/run/dnscache"
	echo -e "${dns_caching_dns//,/\\n}" > "/var/run/dnscache/dnscache.conf"

	[ -d "/var/sbin" ] || mkdir -p "/var/sbin"
	cp -a "/usr/bin/dnsproxy" "/var/sbin/dnscache"
	echo "DNSProxy: Start DNS Caching"
}

start_AdGuardHome() {
	inital_conf

	[ -d "/etc/AdGuardHome" ] || mkdir -p "/etc/AdGuardHome"

	[ ! -f "/etc/AdGuardHome/AdGuardHome.yaml" ] && cat > "/etc/AdGuardHome/AdGuardHome.yaml" <<"EOF"
bind_host: 0.0.0.0
bind_port: 3333
beta_bind_port: 0
users:
- name: AdGuardHome
  password: $2a$10$a55qnLfK5XnOdLj68fHMEex1FVeUSVcIdZBl0g0QM9qHRYf1IVuKe
auth_attempts: 5
block_auth_min: 15
http_proxy: ""
language: zh-cn
debug_pprof: false
web_session_ttl: 720
dns:
  bind_hosts:
  - 0.0.0.0
  port: 5333
  statistics_interval: 7
  querylog_enabled: true
  querylog_file_enabled: true
  querylog_interval: 168h
  querylog_size_memory: 1000
  anonymize_client_ip: false
  protection_enabled: true
  blocking_mode: default
  blocking_ipv4: ""
  blocking_ipv6: ""
  blocked_response_ttl: 10
  parental_block_host: family-block.dns.adguard.com
  safebrowsing_block_host: standard-block.dns.adguard.com
  ratelimit: 0
  ratelimit_whitelist: []
  refuse_any: true
  upstream_dns:
  - tls://dns.adguard.com
  - tls://dns-unfiltered.adguard.com
  - tls://dns.google
  - tls://1dot1dot1dot1.cloudflare-dns.com
  - tls://security.cloudflare-dns.com
  - tls://family.cloudflare-dns.com
  - tls://dns.quad9.net
  - tls://dns10.quad9.net
  - tls://dns11.quad9.net
  - tls://dns.alidns.com
  - tls://dns.cfiec.net
  - tls://dot.pub
  upstream_dns_file: ""
  bootstrap_dns:
  - 223.5.5.5
  - 223.6.6.6
  - 114.114.114.114
  - 114.114.115.115
  - tcp://8.8.8.8
  - tcp://8.8.4.4
  - tcp://1.1.1.1
  - tcp://1.0.0.1
  - tcp://1.1.1.2
  - tcp://1.0.0.2
  - tcp://1.1.1.3
  - tcp://1.0.0.3
  - tcp://9.9.9.9
  - tcp://149.112.112.112
  - 2001:4860:4860::8888
  - 2001:4860:4860::8844
  - 2606:4700:4700::1111
  - 2606:4700:4700::1001
  - 2606:4700:4700::1112
  - 2606:4700:4700::1002
  - 2606:4700:4700::1113
  - 2606:4700:4700::1003
  - 2620:fe::fe
  - 2620:fe::fe:9
  - 2400:3200::1
  - 2400:3200:baba::1
  - 240C::6666
  - 240C::6644
  all_servers: true
  fastest_addr: false
  fastest_timeout: 1s
  allowed_clients: []
  disallowed_clients: []
  blocked_hosts:
  - version.bind
  - id.server
  - hostname.bind
  trusted_proxies:
  - 127.0.0.0/8
  - ::1/128
  cache_size: 4194304
  cache_ttl_min: 3600
  cache_ttl_max: 86400
  cache_optimistic: false
  bogus_nxdomain: []
  aaaa_disabled: false
  enable_dnssec: false
  edns_client_subnet: false
  max_goroutines: 300
  ipset: []
  filtering_enabled: true
  filters_update_interval: 24
  parental_enabled: false
  safesearch_enabled: false
  safebrowsing_enabled: false
  safebrowsing_cache_size: 1048576
  safesearch_cache_size: 1048576
  parental_cache_size: 1048576
  cache_time: 30
  rewrites: []
  blocked_services: []
  upstream_timeout: 10s
  local_domain_name: lan
  resolve_clients: true
  use_private_ptr_resolvers: true
  local_ptr_upstreams: []
tls:
  enabled: false
  server_name: ""
  force_https: false
  port_https: 443
  port_dns_over_tls: 853
  port_dns_over_quic: 784
  port_dnscrypt: 0
  dnscrypt_config_file: ""
  allow_unencrypted_doh: false
  strict_sni_check: false
  certificate_chain: ""
  private_key: ""
  certificate_path: ""
  private_key_path: ""
filters:
- enabled: false
  url: https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt
  name: AdGuard Simplified Domain Names filter
  id: 1
- enabled: false
  url: https://adaway.org/hosts.txt
  name: AdAway
  id: 2
- enabled: false
  url: https://gitee.com/xinggsf/Adblock-Rule/raw/master/rule.txt
  name: 乘风
  id: 1648298773
- enabled: false
  url: https://anti-ad.net/easylist.txt
  name: anti-AD
  id: 1648298774
- enabled: false
  url: https://easylist-downloads.adblockplus.org/easyprivacy.txt
  name: EasyList
  id: 1648298775
- enabled: false
  url: https://raw.githubusercontent.com/banbendalao/ADgk/master/ADgk.txt
  name: ADgk
  id: 1648298776
whitelist_filters: []
user_rules:
- '@@||sp0.baidu.com^'
- '@@||sp1.baidu.com^'
dhcp:
  enabled: false
  interface_name: ""
  dhcpv4:
    gateway_ip: ""
    subnet_mask: ""
    range_start: ""
    range_end: ""
    lease_duration: 0
    icmp_timeout_msec: 1000
    options: []
  dhcpv6:
    range_start: ""
    lease_duration: 86400
    ra_slaac_only: false
    ra_allow_slaac: false
clients: []
log_compress: false
log_localtime: false
log_max_backups: 0
log_max_size: 100
log_max_age: 3
log_file: ""
verbose: false
os:
  group: ""
  user: ""
  rlimit_nofile: 0
schema_version: 12

EOF

	if [ "${dns_caching_mode}" = "5" ];  then
		sed -i 's/'"  port"':.*/'"  port"':'" 53"'/g' "/etc/AdGuardHome/AdGuardHome.yaml"
	else
		sed -i 's/'"  port"':.*/'"  port"':'" 5333"'/g' "/etc/AdGuardHome/AdGuardHome.yaml"
	fi

	[ -d "/var/run/dnscache/AdGuardHome" ] || mkdir -p "/var/run/dnscache/AdGuardHome"
	ln -s /etc/AdGuardHome/AdGuardHome.yaml /var/run/dnscache/AdGuardHome/AdGuardHome.yaml
	[ -d "/var/sbin" ] || mkdir -p "/var/sbin"
	[ -f "/var/sbin/dnscache" ] && rm -rf /var/sbin/dnscache
	ln -s "/usr/bin/AdGuardHome" "/var/sbin/dnscache"
	echo "AdGuardHome: Start DNS Caching"

}

start_instance() {
	inital_conf

	procd_open_instance
	if [ "${dns_caching_mode}" = "1" ];  then
		procd_set_param command /var/sbin/dnscache -c /var/run/dnscache/dnscache.conf
	elif [ "${dns_caching_mode}" = "2" ];  then
		procd_set_param command /var/sbin/dnscache -f /var/run/dnscache/dnscache.conf
	elif [ "${dns_caching_mode}" = "3" ];  then
		procd_set_param command /var/sbin/dnscache -l "127.0.0.1" -p "5333" -b "tls://9.9.9.9" -f "tls://8.8.8.8" -u "/var/run/dnscache/dnscache.conf" --all-servers --cache --cache-min-ttl=3600
	elif [ "${dns_caching_mode}" = "4" ] || [ "${dns_caching_mode}" = "5" ];  then
		procd_set_param command /var/sbin/dnscache -c /var/run/dnscache/AdGuardHome/AdGuardHome.yaml -w /var/run/dnscache/AdGuardHome -h 0.0.0.0 -p 3333 -l /var/log/dnscache.file --no-check-update
	fi
	procd_set_param stdout 1
	procd_set_param stderr 1
	procd_set_param respawn
	procd_close_instance
}
stop_dnscache() {
	rm -rf "/var/dnscache" "/var/run/dnscache"
	echo "Stop DNS Caching"
}

change_dns() {
	inital_conf

	uci -q delete dhcp.@dnsmasq[0].server
	if [ "${dns_caching_mode}" = "5" ];  then
		uci add_list dhcp.@dnsmasq[0].port="5330"
	else
		uci -q delete dhcp.@dnsmasq[0].port
		uci add_list dhcp.@dnsmasq[0].server="127.0.0.1#5333"
	fi
	uci set dhcp.@dnsmasq[0].noresolv="1"
	uci commit dhcp

}

revert_dns() {
	uci -q delete dhcp.@dnsmasq[0].port				
	uci -q del_list dhcp.@dnsmasq[0].server="127.0.0.1#5333"
	uci set dhcp.@dnsmasq[0].resolvfile="/tmp/resolv.conf.d/resolv.conf.auto"
	uci set dhcp.@dnsmasq[0].noresolv="0"
	uci commit dhcp
}

start_service(){
	inital_conf

	uci set firewall.@defaults[0].flow_offloading="${sw_flow}"
	uci set firewall.@defaults[0].flow_offloading_hw="${hw_flow}"
	uci set firewall.@defaults[0].fullcone="${fullcone_nat}"
	uci commit firewall

	/etc/init.d/turboacc_fss start

	[ "${sw_flow}" -ne "1" ] && {
		[ "${sfe_flow}" -eq "1" ] && {
			[ "$(have_ecm_init)" = "0" ] && {
				/etc/init.d/shortcut-fe enabled || /etc/init.d/shortcut-fe enable
				/etc/init.d/shortcut-fe start
			}
		}
		[ "${sfe_flow}" -eq "0" ] && [ -e "/etc/init.d/shortcut-fe" ] && [ "$(have_ecm_init)" = "0" ] && \
		/etc/init.d/shortcut-fe enabled && {
			/etc/init.d/shortcut-fe stop 2>"/dev/null"
			/etc/init.d/shortcut-fe disable
		}
	}

	if [ "${bbr_cca}" -eq "1" ];  then
		sysctl -w net.ipv4.tcp_congestion_control="bbr"
	else
		sysctl -w net.ipv4.tcp_congestion_control="cubic"
	fi	

	if [ "${dns_caching}" -eq "1" ];  then
		stop_dnscache
		sleep 1

		rm -f "/var/log/dnscache.file"
		if [ "${dns_caching_mode}" = "1" ];  then
			start_pdnsd
			start_instance
		elif [ "${dns_caching_mode}" = "2" ];  then
			start_dnsforwarder
			start_instance
		elif [ "${dns_caching_mode}" = "3" ];  then
			start_dnsproxy
			start_instance
		elif [ "${dns_caching_mode}" = "4" ] || [ "${dns_caching_mode}" = "5" ];  then
			start_AdGuardHome
			start_instance
		fi

		change_dns
	else
		stop_dnscache
		revert_dns
	fi

	if [ "${restart_utils}" = "true" ]; then
		/etc/init.d/dnsmasq restart >"/dev/null" 2>&1 && echo "DNSMASQ change"
		/etc/init.d/firewall restart >"/dev/null" 2>&1
	fi
}

stop_service(){
	inital_conf

	uci set firewall.@defaults[0].flow_offloading="${sw_flow}"
	uci set firewall.@defaults[0].flow_offloading_hw="${hw_flow}"
	uci set firewall.@defaults[0].fullcone="${fullcone_nat}"
	uci commit firewall

	[ "${sfe_flow}" -ne "1" ] && {
		[ -e "/etc/init.d/shortcut-fe" ] && [ "$(have_ecm_init)" = "0" ] && {
			/etc/init.d/shortcut-fe stop 2>"/dev/null"
			/etc/init.d/shortcut-fe enabled && /etc/init.d/shortcut-fe disable
		}
	}

	stop_dnscache
	revert_dns

	if [ "${restart_utils}" = "true" ]; then
		/etc/init.d/dnsmasq restart >"/dev/null" 2>&1 && echo "DNSMASQ revert"
		/etc/init.d/firewall restart >"/dev/null" 2>&1
	fi
}

restart(){
	restart_utils="false"
	stop_service
	start_service
	/etc/init.d/dnsmasq restart >"/dev/null" 2>&1 && echo "DNSMASQ restart"
	/etc/init.d/firewall restart >"/dev/null" 2>&1
}

have_ecm_init() {
	[ -d "/etc/init.d/qca-nss-ecm" ] && echo 1 && return
	echo 0
}

check_status(){
	case "$1" in
	"fastpath")
		if [ "$(cat "/sys/module/xt_FLOWOFFLOAD/refcnt" 2>"/dev/null" || echo 0)" -ne "0" ]; then
			echo -n "Flow Offloading"
			exit 0
		elif lsmod | grep -q "ecm"; then
			if lsmod | grep -q "shortcut_fe_drv"; then
				echo -n "QCA-NSS-ECM-SFE"
				exit 0
			else
				echo -n "QCA-NSS-ECM"
				exit 0
			fi
		elif lsmod | grep -q "shortcut_fe_cm"; then
			echo -n "Shortcut-FE"
			exit 0
		else
			exit 1
		fi
		;;
	"fullconenat")
		[ "$(cat "/sys/module/xt_FULLCONENAT/refcnt" 2>"/dev/null" || echo 0)" -ne "0" ] && \
			exit 0 || exit 1
		;;
	"bbr")
		[ "x$(cat "/proc/sys/net/ipv4/tcp_congestion_control" 2>"/dev/null")" = "xbbr" ] && \
			exit 0 || exit 1
		;;
	"dns")
		pgrep "dnscache" >"/dev/null" && exit 0 || exit 1
		;;
	*)
		exit 2
		;;
	esac
}
